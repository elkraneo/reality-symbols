[{"name":"AccessibilityComponent","properties":[{"type":"LocalizedStringResource","comment":"A localized string key that represents the current value of the entity.","name":"value","complete":"var value: LocalizedStringResource?"},{"complete":"var label: LocalizedStringResource?","type":"LocalizedStringResource","comment":"A succinct label that identifies the entity, in a localized string key.","name":"label"},{"name":"customContent","type":"[AccessibilityComponent.CustomContent]","comment":"The Custom Content API is useful for delivering accessibility information from complex data sets to your users in measured portions.Using this API allows you to leverage assistive technologies to present only the accessible content your app’s users need, when they need it.","complete":"var customContent: [AccessibilityComponent.CustomContent]"},{"name":"systemActions","type":"AccessibilityComponent.SupportedActions","complete":"var systemActions: AccessibilityComponent.SupportedActions","comment":"The set of supported accessibility actions."},{"comment":"A Boolean value indicating whether the receiver is an accessibility entity that an assistive application can access.","complete":"var isAccessibilityElement: Bool","name":"isAccessibilityElement","type":"Bool"},{"comment":"An array of custom actions supported by the entity, identified by their localized string key.","complete":"var customActions: [LocalizedStringResource]","name":"customActions","type":"[LocalizedStringResource]"}]},{"name":"AnchoringComponent","properties":[{"complete":"let target: AnchoringComponent.Target","name":"target","comment":"The kind of real world object to which the anchor entity should anchor.","type":"AnchoringComponent.Target"}]},{"properties":[{"name":"isPaused","type":"Bool","complete":"var isPaused: Bool","comment":"A Boolean that you can set to temporarily stop applying body tracking tothe model and freeze the model in its current pose."},{"name":"target","type":"BodyTrackingComponent.Target","comment":"The body-tracking setting.","complete":"var target: BodyTrackingComponent.Target"}],"name":"BodyTrackingComponent"},{"name":"CharacterControllerComponent","properties":[{"comment":"The maximum obstacle height that the controller can move over.Specify this value relative to the entity's coordinate system.","type":"Float","name":"stepLimit","complete":"var stepLimit: Float"},{"name":"collisionFilter","complete":"var collisionFilter: CollisionFilter","type":"CollisionFilter","comment":"The character's collision filter.For more information on using collision filters, see <doc:\/\/com.apple.documentation\/realitykit\/controlling-entity-collisions-in-realitykit\/>."},{"name":"skinWidth","complete":"var skinWidth: Float","type":"Float","comment":"An added tolerance around the character capsule.A small skin, known as the *contact offset*, is maintained around the controller's volume to avoidrounding and precision issues with collision detection. Specify this value relative to the entity'scoordinate system."},{"name":"upVector","type":"SIMD3<Float>","comment":"Y axis direction relative to the physics origin.Rotates the object so that the vertical height is along the up vector.Vector must be normalized and specified in *physics space*, the coordinate system of thephysics simulation.","complete":"var upVector: SIMD3<Float>"},{"comment":"The slope limit expressed as a limit angle in radians.This value represents the maximum slope that the character can move over. RealityKit applies this valueto characters that are walking on static objects, but not when walking on kinematic or dynamic objects.","complete":"var slopeLimit: Float","type":"Float","name":"slopeLimit"},{"type":"Float","name":"radius","complete":"var radius: Float","comment":"The capsule radius.Specify this value in the entity's coordinate system."},{"complete":"var height: Float","comment":"The capsule height.The capsule height includes radii and should be specified the entity's coordinate system.","type":"Float","name":"height"}]},{"properties":[{"type":"Bool","name":"isOnGround","complete":"let isOnGround: Bool","comment":"True if character controller is grounded, otherwise false."},{"name":"velocity","comment":"The linear speed relative to the phyics origin. In physics space.","type":"SIMD3<Float>","complete":"let velocity: SIMD3<Float>"}],"name":"CharacterControllerStateComponent"},{"name":"CollisionComponent","properties":[{"comment":"The collision filter used to segregate entities into different collisiongroups.","name":"filter","type":"CollisionFilter","complete":"var filter: CollisionFilter"},{"name":"shapes","complete":"var shapes: [ShapeResource]","type":"[ShapeResource]","comment":"A collection of shape resources that collectively represent the outerdimensions of an entity for the purposes of collision detection."},{"type":"CollisionComponent.Mode","name":"mode","complete":"var mode: CollisionComponent.Mode","comment":"The collision mode."}]},{"properties":[{"comment":"A Boolean that you use to control whether the directional light operatesas a proxy for a real-world light.Set the value to `true` when you want the light to cast shadows onvirtual content without illuminating anything in the scene. You can usethis to create shadows on occlusion materials that accept dynamiclighting.","complete":"var isRealWorldProxy: Bool","type":"Bool","name":"isRealWorldProxy"},{"name":"intensity","comment":"The intensity of the directional light, measured in lumen per squaremeter.","type":"Float","complete":"var intensity: Float"}],"name":"DirectionalLightComponent"},{"name":"ModelComponent","properties":[{"comment":"A margin applied to an entity’s bounding box that determines objectvisibility.When determining which entities are currently visible, RealityKit testseach entity’s bounding box to see if it overlaps with the camera’s fieldof view (also known as the camera’s _frustum_). For efficiency, entitieswith a bounding box that don’t overlap the camera’s frustum aren’trendered. Use this property to prevent RealityKit from incorrectlyculling entities that use a ``CustomMaterial`` with a geometry modifierthat moves vertices outside of the entity’s bounding box.RealityKit adds the value of `boundsMargin` to the bounding box beforedetermining which entities are visible.","name":"boundsMargin","complete":"var boundsMargin: Float { get set }","type":"Float"},{"type":"MeshResource","comment":"The mesh that defines the shape of the entity.For more information, see ``RealityKit\/MeshResource``","complete":"var mesh: MeshResource","name":"mesh"},{"type":"[Material]","name":"materials","complete":"var materials: [Material]","comment":"The materials used by the model.Each ``RealityKit\/MeshResource`` requires a set of materials. An entity that has no materialsrenders using a pink, striped material.  To determine the number of  materials a model entity requires, use `MeshResource.expectedMaterialCount`"}]},{"name":"ModelDebugOptionsComponent","properties":[{"type":"ModelDebugOptionsComponent.VisualizationMode","complete":"var visualizationMode: ModelDebugOptionsComponent.VisualizationMode { get }","comment":"The part of the rendering process to display as the entity’s surfacetexture.","name":"visualizationMode"}]},{"properties":[{"complete":"var near: Float","type":"Float","name":"near","comment":"The minimum distance in meters from the camera that the camera can see.The value defaults to 1 centimeter. Always use a value greater than `0`and less than the value of ``PerspectiveCameraComponent\/far``. Therenderer clips any surface closer than the``PerspectiveCameraComponent\/near`` point."},{"complete":"var far: Float","comment":"The maximum distance in meters from the camera that the camera can see.The value defaults to infinity. Always use a value greater than thevalue of ``PerspectiveCameraComponent\/near``. The renderer clips anysurface beyond the ``PerspectiveCameraComponent\/far`` point.","name":"far","type":"Float"},{"complete":"var fieldOfViewInDegrees: Float","name":"fieldOfViewInDegrees","type":"Float","comment":"The camera’s total vertical field of view in degrees.This property contains the entire vertifical field of view for thecamera in degrees. The system automatically calculates the horizontalfield of view from this value to fit the aspect ratio of the device’sscreen.This property defaults to `60` degrees."}],"name":"PerspectiveCameraComponent"},{"properties":[{"complete":"var material: PhysicsMaterialResource","type":"PhysicsMaterialResource","name":"material","comment":"The physics body’s material properties, like friction.By default, the body’s material resource is set to``PhysicsMaterialResource\/default``, which provides a modest amount offriction and restitution (bounciness)."},{"complete":"var isRotationLocked: (x: Bool, y: Bool, z: Bool)","type":"(x: Bool, y: Bool, z: Bool)","comment":"A tuple of Boolean values that you use to lock rotation of the physicsbody around any of the three axes.For any one of the three Booleans in the tuple that you set to `true`,rotation is restricted on the axis represented by that item. Forexample, if you set the `x` item to true, then the body can’t rotatearound the x-axis. By default, rotation isn’t restricted.","name":"isRotationLocked"},{"complete":"var isContinuousCollisionDetectionEnabled: Bool","type":"Bool","comment":"A Boolean that controls whether the physics simulation performscontinuous collision detection.Set the value to `true` to perform continuous collision detection. Thevalue is `false` by default, indicating the simulation should applydiscrete collision detection.Discrete collision detection considers only the position of a body onceper rendered frame, or about every 16 milliseconds at 60 frames persecond. Continuous collision detection considers the position of thebody throughout the frame interval. The latter is more computationallyexpensive, but can help to avoid missing a collision for a quicklymoving object, like a projectile.","name":"isContinuousCollisionDetectionEnabled"},{"complete":"var isTranslationLocked: (x: Bool, y: Bool, z: Bool)","comment":"A tuple of Boolean values that you use to lock the position of thephysics body along any of the three axes.You can restrict movement of the body along one or more axes by settingthe corresponding item in the tuple to `true`. For example, if you setthe `x` and the `z` items in the tuple to `true`, then the body can moveonly along the y-axis. By default, movement isn’t restricted.","type":"(x: Bool, y: Bool, z: Bool)","name":"isTranslationLocked"},{"complete":"var mode: PhysicsBodyMode","type":"PhysicsBodyMode","name":"mode","comment":"The physics body’s mode, indicating how or if it moves.By default, this value is set to ``PhysicsBodyMode\/dynamic``, meaningthe body responds to forces."},{"type":"PhysicsMassProperties","name":"massProperties","complete":"var massProperties: PhysicsMassProperties","comment":"The physics body’s mass properties, like inertia and center of mass.By default, the mass properties value is``PhysicsMassProperties\/default``, which matches the properties of aunit sphere with mass of 1 kilogram."}],"name":"PhysicsBodyComponent"},{"properties":[{"name":"linearVelocity","complete":"var linearVelocity: SIMD3<Float>","type":"SIMD3<Float>","comment":"The linear velocity of the body in the physics simulation."},{"comment":"The angular velocity of the body around the center of mass.","complete":"var angularVelocity: SIMD3<Float>","type":"SIMD3<Float>","name":"angularVelocity"}],"name":"PhysicsMotionComponent"},{"properties":[{"type":"Float","name":"intensity","complete":"var intensity: Float","comment":"The intensity of the point light, measured in lumen."},{"name":"attenuationRadius","comment":"The point light attenuation radius in meters.At any distance greater from the light that's greater than this value, the light'sintensity is zero.","type":"Float","complete":"var attenuationRadius: Float"}],"name":"PointLightComponent"},{"name":"SceneUnderstandingComponent","properties":[{"comment":"The type of real-world object that the component models.","name":"entityType","complete":"var entityType: SceneUnderstandingComponent.EntityType?","type":"SceneUnderstandingComponent.EntityType"}]},{"name":"SpotLightComponent","properties":[{"comment":"The intensity of the spotlight measured in lumen.","name":"intensity","type":"Float","complete":"var intensity: Float"},{"type":"Float","complete":"var outerAngleInDegrees: Float","comment":"The outer angle of the spotlight in degrees.A spot light's `innerAngle` and `outerAngle` reflect the size of the light's cone, which shinesrelative to the entity's forward direction (0, 0, -1). The light is at full  intensity between 0° and`innerAngle`. RealityKit attenuates the  light's intensity between `innerAngle` and`outerAngle`.  Beyond `outerAngle`, the light intensity is `0.0`.","name":"outerAngleInDegrees"},{"type":"Float","complete":"var innerAngleInDegrees: Float","comment":"The inner angle of the spotlight in degrees.A spot light's `innerAngle` and `outerAngle` reflect the size of the light's cone, which shinesrelative to the entity's forward direction (0, 0, -1). The light is at full  intensity between 0° and`innerAngle`. RealityKit attenuates the  light's intensity between `innerAngle` and`outerAngle`.  Beyond `outerAngle`, the light intensity is `0.0`.","name":"innerAngleInDegrees"},{"comment":"The attenuation radius in meters, after which the intensity of thespotlight is zero.","complete":"var attenuationRadius: Float","type":"Float","name":"attenuationRadius"}]},{"name":"SynchronizationComponent","properties":[{"comment":"A unique identifier of an entity within a network session.","type":"UInt64","complete":"var identifier: UInt64 { get }","name":"identifier"},{"name":"ownershipTransferMode","comment":"The entity’s transfer ownership mode.By default, the transfer mode is``SynchronizationComponent\/OwnershipTransferMode-swift.enum\/autoAccept``.You can set it to``SynchronizationComponent\/OwnershipTransferMode-swift.enum\/manual`` torequire explicit confirmation of the request by your app.","type":"SynchronizationComponent.OwnershipTransferMode","complete":"var ownershipTransferMode: SynchronizationComponent.OwnershipTransferMode"},{"complete":"var isOwner: Bool { get }","name":"isOwner","comment":"A Boolean that indicates whether the calling process owns the entity.","type":"Bool"}]},{"name":"Transform","properties":[{"type":"simd_quatf","complete":"var rotation: simd_quatf","name":"rotation","comment":"The rotation of the entity specified as a unit quaternion."},{"name":"scale","complete":"var scale: SIMD3<Float>","comment":"The scaling factor applied to the entity.","type":"SIMD3<Float>"},{"complete":"var matrix: float4x4 { get set }","name":"matrix","type":"float4x4","comment":"The transform represented as a 4x4 matrix.The ``Transform`` component can’t represent all transforms that ageneral 4x4 matrix can represent. Using a 4x4 matrix to set thetransform is therefore a lossy event that might result in certaintransformations, like shear, being dropped."},{"complete":"var hashValue: Int { get }","name":"hashValue","type":"Int","comment":"The hash value.Hash values are not guaranteed to be equal across different executions ofyour program. Do not save hash values to use during a future execution.- Important: `hashValue` is deprecated as a `Hashable` requirement. To  conform to `Hashable`, implement the `hash(into:)` requirement instead.  The compiler provides an implementation for `hashValue` for you."},{"complete":"var translation: SIMD3<Float>","name":"translation","type":"SIMD3<Float>","comment":"The position of the entity along the x, y, and z axes."}]}]