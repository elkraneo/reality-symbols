[{"name":"AccessibilityComponent","properties":[{"name":"label","type":"LocalizedStringResource","complete":"var label: LocalizedStringResource?","comment":"A succinct label that identifies the entity, in a localized string key."},{"type":"Bool","name":"isAccessibilityElement","complete":"var isAccessibilityElement: Bool","comment":"A Boolean value indicating whether the receiver is an accessibility entity that an assistive application can access."},{"comment":"The set of supported accessibility actions.","complete":"var systemActions: AccessibilityComponent.SupportedActions","type":"AccessibilityComponent.SupportedActions","name":"systemActions"},{"complete":"var customActions: [LocalizedStringResource]","comment":"An array of custom actions supported by the entity, identified by their localized string key.","type":"[LocalizedStringResource]","name":"customActions"},{"complete":"var customContent: [AccessibilityComponent.CustomContent]","comment":"An array of custom content objects that deliver accessibility information.Use the Custom Content API to leverage assistive technologies to deliver complex data sets to users in measured portions when they need it.","type":"[AccessibilityComponent.CustomContent]","name":"customContent"},{"name":"value","comment":"A localized string key that represents the current value of the entity.","type":"LocalizedStringResource","complete":"var value: LocalizedStringResource?"}]},{"name":"AdaptiveResolutionComponent","properties":[{"complete":"var pixelsPerMeter: Float { get }","type":"Float","name":"pixelsPerMeter"}]},{"properties":[{"complete":"var hashValue: Int { get }","type":"Int","name":"hashValue","comment":"The hash value.Hash values are not guaranteed to be equal across different executions ofyour program. Do not save hash values to use during a future execution.- Important: `hashValue` is deprecated as a `Hashable` requirement. To  conform to `Hashable`, implement the `hash(into:)` requirement instead.  The compiler provides an implementation for `hashValue` for you."},{"type":"Audio.Decibel","complete":"var gain: Audio.Decibel","name":"gain","comment":"The overall level for all sounds emitted from an entity. In relative Decibels, in the range  `-.infinity ... .zero` where`.zero` is the default."}],"name":"AmbientAudioComponent"},{"name":"AnchoringComponent","properties":[{"complete":"var trackingMode: AnchoringComponent.TrackingMode { get set }","type":"AnchoringComponent.TrackingMode","name":"trackingMode"},{"type":"AnchoringComponent.Target","name":"target","complete":"let target: AnchoringComponent.Target","comment":"The kind of real world object to which the anchor entity should anchor."}]},{"properties":[{"complete":"var hashValue: Int { get }","name":"hashValue","comment":"The hash value.Hash values are not guaranteed to be equal across different executions ofyour program. Do not save hash values to use during a future execution.- Important: `hashValue` is deprecated as a `Hashable` requirement. To  conform to `Hashable`, implement the `hash(into:)` requirement instead.  The compiler provides an implementation for `hashValue` for you.","type":"Int"}],"name":"AudioMixGroupsComponent"},{"properties":[{"complete":"var gain: Audio.Decibel","type":"Audio.Decibel","name":"gain","comment":"The overall level for all sounds emitted from an entity. In relative Decibels, in the range  `-.infinity ... .zero` where`.zero` is the default."},{"complete":"var hashValue: Int { get }","name":"hashValue","type":"Int","comment":"The hash value.Hash values are not guaranteed to be equal across different executions ofyour program. Do not save hash values to use during a future execution.- Important: `hashValue` is deprecated as a `Hashable` requirement. To  conform to `Hashable`, implement the `hash(into:)` requirement instead.  The compiler provides an implementation for `hashValue` for you."}],"name":"ChannelAudioComponent"},{"name":"CharacterControllerComponent","properties":[{"name":"slopeLimit","type":"Float","complete":"var slopeLimit: Float","comment":"The slope limit expressed as a limit angle in radians.This value represents the maximum slope that the character can move over. RealityKit applies this valueto characters that are walking on static objects, but not when walking on kinematic or dynamic objects.Changing this value after the CharacterControllerComponent has been created and added to Entityhas no effect."},{"complete":"var skinWidth: Float","comment":"An added tolerance around the character capsule.A small skin, known as the *contact offset*, is maintained around the controller's volume to avoidrounding and precision issues with collision detection. Specify this value relative to the entity'scoordinate system.","name":"skinWidth","type":"Float"},{"name":"stepLimit","comment":"The maximum obstacle height that the controller can move over.Specify this value relative to the entity's coordinate system.Changing this value after the CharacterControllerComponent has been created and added to Entityhas no effect.","complete":"var stepLimit: Float","type":"Float"},{"comment":"Y axis direction relative to the physics origin.Rotates the object so that the vertical height is along the up vector.Vector must be normalized and specified in *physics space*, the coordinate system of thephysics simulation.","type":"SIMD3<Float>","name":"upVector","complete":"var upVector: SIMD3<Float>"},{"name":"collisionFilter","comment":"The character's collision filter.For more information on using collision filters, see <doc:\/\/com.apple.documentation\/realitykit\/controlling-entity-collisions-in-realitykit\/>.","complete":"var collisionFilter: CollisionFilter","type":"CollisionFilter"},{"name":"radius","type":"Float","complete":"var radius: Float","comment":"The capsule radius.Specify this value in the entity's coordinate system."},{"name":"height","comment":"The capsule height.The capsule height includes radii and should be specified the entity's coordinate system.","complete":"var height: Float","type":"Float"}]},{"properties":[{"name":"isOnGround","type":"Bool","complete":"let isOnGround: Bool","comment":"True if character controller is grounded, otherwise false."},{"type":"SIMD3<Float>","comment":"The linear speed relative to the phyics origin. In physics space.","complete":"let velocity: SIMD3<Float>","name":"velocity"}],"name":"CharacterControllerStateComponent"},{"properties":[{"complete":"var collisionOptions: CollisionComponent.CollisionOptions { get set }","name":"collisionOptions","type":"CollisionComponent.CollisionOptions"},{"name":"isStatic","complete":"var isStatic: Bool { get set }","type":"Bool","comment":"A Boolean value that indicates whether the collider is static.When an object is static the physics engine recognizes that the object isn't moving, which typically improves performance."},{"comment":"The collision mode.","name":"mode","type":"CollisionComponent.Mode","complete":"var mode: CollisionComponent.Mode"},{"complete":"var shapes: [ShapeResource]","name":"shapes","type":"[ShapeResource]","comment":"A collection of shape resources that collectively represent the outerdimensions of an entity for the purposes of collision detection."},{"comment":"The collision filter used to segregate entities into different collisiongroups.","complete":"var filter: CollisionFilter","name":"filter","type":"CollisionFilter"}],"name":"CollisionComponent"},{"properties":[{"name":"castsShadow","comment":"If true, the entity will cast a shadow","type":"Bool","complete":"var castsShadow: Bool"}],"name":"GroundingShadowComponent"},{"name":"HoverEffectComponent","properties":[]},{"name":"ImageBasedLightComponent","properties":[{"complete":"var source: ImageBasedLightComponent.Source","comment":"Image(s) of the lighting environment","type":"ImageBasedLightComponent.Source","name":"source"},{"complete":"var inheritsRotation: Bool","comment":"Whether the IBL inherit the rotation of the Entity","name":"inheritsRotation","type":"Bool"},{"comment":"The intensity value of the probeAn intensityExponent of 0 means using the diffuse\/specular intensities as-isOtherwise the intensity is multiplied by 2^intensityExponent","complete":"var intensityExponent: Float","name":"intensityExponent","type":"Float"}]},{"properties":[{"name":"imageBasedLight","type":"Entity","complete":"var imageBasedLight: Entity"}],"name":"ImageBasedLightReceiverComponent"},{"properties":[{"name":"allowedInputTypes","complete":"var allowedInputTypes: InputTargetComponent.InputType","type":"InputTargetComponent.InputType","comment":"The set of input types this component's entity can receive."},{"type":"Bool","complete":"var isEnabled: Bool","comment":"Whether the component's entity is enabled for input.","name":"isEnabled"}],"name":"InputTargetComponent"},{"name":"ModelComponent","properties":[{"name":"boundsMargin","type":"Float","complete":"var boundsMargin: Float { get set }","comment":"A margin applied to an entity’s bounding box that determines objectvisibility.When determining which entities are currently visible, RealityKit testseach entity’s bounding box to see if it overlaps with the camera’s fieldof view (also known as the camera’s _frustum_). For efficiency, entitieswith a bounding box that don’t overlap the camera’s frustum aren’trendered. Use this property to prevent RealityKit from incorrectlyculling entities that use a ``CustomMaterial`` with a geometry modifierthat moves vertices outside of the entity’s bounding box.RealityKit adds the value of `boundsMargin` to the bounding box beforedetermining which entities are visible."},{"complete":"var mesh: MeshResource","type":"MeshResource","comment":"The mesh that defines the shape of the entity.For more information, see ``RealityKit\/MeshResource``","name":"mesh"},{"complete":"var materials: [Material]","name":"materials","type":"[Material]","comment":"The materials used by the model.Each ``RealityKit\/MeshResource`` requires a set of materials. An entity that has no materialsrenders using a pink, striped material.  To determine the number of  materials a model entity requires, use `MeshResource.expectedMaterialCount`"}]},{"properties":[{"name":"visualizationMode","comment":"The part of the rendering process to display as the entity’s surfacetexture.","complete":"var visualizationMode: ModelDebugOptionsComponent.VisualizationMode { get }","type":"ModelDebugOptionsComponent.VisualizationMode"}],"name":"ModelDebugOptionsComponent"},{"properties":[{"type":"Int32","comment":"The draw order of the model relative to other models in its group. Lower value means the modeldraws earlier.","complete":"var order: Int32 { get set }","name":"order"},{"name":"group","type":"ModelSortGroup","complete":"var group: ModelSortGroup { get set }","comment":"Group membership is strictly defined by having an identical group to other entities in the scene.This is not hierarchical; membership only applies to the entity which owns this component."}],"name":"ModelSortGroupComponent"},{"name":"OpacityComponent","properties":[{"name":"opacity","comment":"The opacity value applied to the entity and its descendants.","complete":"var opacity: Float","type":"Float"}]},{"name":"ParticleEmitterComponent","properties":[{"comment":"The possible initial directions for newly spawned particles, relative to the emitter shape.Defaults to normal.","name":"birthDirection","type":"ParticleEmitterComponent.BirthDirection","complete":"var birthDirection: ParticleEmitterComponent.BirthDirection"},{"comment":"Radial sweep angle for sphere, cylinder, cone, and torus emitter shapes. Defaults to 2 * pi.","complete":"var radialAmount: Float","name":"radialAmount","type":"Float"},{"comment":"Number of particles to emit in a single burst. Defaults to 100.","name":"burstCount","complete":"var burstCount: Int","type":"Int"},{"name":"fieldSimulationSpace","complete":"var fieldSimulationSpace: ParticleEmitterComponent.SimulationSpace","type":"ParticleEmitterComponent.SimulationSpace","comment":"Field Simulation Space, either local or global"},{"comment":"Defines a plus\/minus range from which a value is randomly selected to offset `burstCount`.","type":"Int","name":"burstCountVariation","complete":"var burstCountVariation: Int"},{"complete":"var speedVariation: Float","comment":"Defines a plus\/minus range (in meters per second) from which a value is randomly selected to offset particle speed.","name":"speedVariation","type":"Float"},{"name":"spawnSpreadFactorVariation","type":"Float","comment":"Defines a plus\/minus range from which a value is randomly selected to offset Spawn Spread Factor.","complete":"var spawnSpreadFactorVariation: Float"},{"comment":"Attributes affecting secondary particles spawned from the main simulation.","name":"spawnedEmitter","complete":"var spawnedEmitter: ParticleEmitterComponent.ParticleEmitter? { get set }","type":"ParticleEmitterComponent.ParticleEmitter"},{"name":"simulationState","complete":"var simulationState: ParticleEmitterComponent.SimulationState","type":"ParticleEmitterComponent.SimulationState","comment":"Controls particle simulation state: playing, paused or stopped. Defaults to `play`."},{"comment":"The emitter shape size in meters.","type":"SIMD3<Float>","name":"emitterShapeSize","complete":"var emitterShapeSize: SIMD3<Float>"},{"complete":"var birthLocation: ParticleEmitterComponent.BirthLocation","comment":"The possible locations for newly spawned particles, relative to the emitter shape. Defaults to surface.","name":"birthLocation","type":"ParticleEmitterComponent.BirthLocation"},{"type":"ParticleEmitterComponent.ParticleEmitter","name":"mainEmitter","complete":"var mainEmitter: ParticleEmitterComponent.ParticleEmitter","comment":"Particle attributes affecting the main particles of the base simulation."},{"type":"Float","complete":"var spawnSpreadFactor: Float","comment":"Amount a spawned particle spreads away from its parent particle, works in conjunction with the spawn particle's `spreadingAngle`. Defaults to 0.","name":"spawnSpreadFactor"},{"name":"spawnVelocityFactor","type":"Float","complete":"var spawnVelocityFactor: Float","comment":"How much of the parent particle's velocity to inherit. Defaults to 1."},{"complete":"var emissionDirection: SIMD3<Float>","name":"emissionDirection","comment":"The direction particles are emitted when birthDirection is set to World or Local. Defaults to (0.0, 1.0, 0.0).","type":"SIMD3<Float>"},{"name":"particlesInheritTransform","complete":"var particlesInheritTransform: Bool","type":"Bool","comment":"Determines if the entity's transformation also affects the particles."},{"type":"ParticleEmitterComponent.EmitterShape","name":"emitterShape","complete":"var emitterShape: ParticleEmitterComponent.EmitterShape","comment":"The shape of the region of space where the system spawns new particles. Defaults to plane."},{"comment":"Disables\/enables particle emission, independent of `simulationState`. Existing particles will not be affected.","complete":"var isEmitting: Bool","name":"isEmitting","type":"Bool"},{"name":"spawnInheritsParentColor","type":"Bool","complete":"var spawnInheritsParentColor: Bool","comment":"Whether or not the spawnedEmitter's color should be overriden by the mainEmitter's color at the time of the spawning."},{"type":"Float","comment":"The initial speed, in meters per second, for newly spawned particles. Defaults to 0.5.","name":"speed","complete":"var speed: Float"},{"comment":"Determines when main particles emit spawn particles. Defaults to `onDeath`.","type":"ParticleEmitterComponent.SpawnOccasion","name":"spawnOccasion","complete":"var spawnOccasion: ParticleEmitterComponent.SpawnOccasion"},{"type":"Float","complete":"var torusInnerRadius: Float","comment":"Radius of the torus' emitter shape tube. Defaults to 0.25.","name":"torusInnerRadius"}]},{"properties":[{"complete":"var fieldOfViewInDegrees: Float","type":"Float","comment":"The camera’s total vertical field of view in degrees.This property contains the entire vertifical field of view for thecamera in degrees. The system automatically calculates the horizontalfield of view from this value to fit the aspect ratio of the device’sscreen.This property defaults to `60` degrees.","name":"fieldOfViewInDegrees"},{"name":"near","type":"Float","complete":"var near: Float","comment":"The minimum distance in meters from the camera that the camera can see.The value defaults to 1 centimeter. Always use a value greater than `0`and less than the value of ``PerspectiveCameraComponent\/far``. Therenderer clips any surface closer than the``PerspectiveCameraComponent\/near`` point."},{"comment":"The maximum distance in meters from the camera that the camera can see.The value defaults to infinity. Always use a value greater than thevalue of ``PerspectiveCameraComponent\/near``. The renderer clips anysurface beyond the ``PerspectiveCameraComponent\/far`` point.","name":"far","complete":"var far: Float","type":"Float"}],"name":"PerspectiveCameraComponent"},{"properties":[{"type":"Bool","complete":"var isContinuousCollisionDetectionEnabled: Bool","name":"isContinuousCollisionDetectionEnabled","comment":"A Boolean that controls whether the physics simulation performscontinuous collision detection.Set the value to `true` to perform continuous collision detection. Thevalue is `false` by default, indicating the simulation should applydiscrete collision detection.Discrete collision detection considers only the position of a body onceper rendered frame, or about every 16 milliseconds at 60 frames persecond. Continuous collision detection considers the position of thebody throughout the frame interval. The latter is more computationallyexpensive, but can help to avoid missing a collision for a quicklymoving object, like a projectile."},{"type":"PhysicsMassProperties","name":"massProperties","complete":"var massProperties: PhysicsMassProperties","comment":"The physics body’s mass properties, like inertia and center of mass.By default, the mass properties value is``PhysicsMassProperties\/default``, which matches the properties of aunit sphere with mass of 1 kilogram."},{"comment":"A tuple of Boolean values that you use to lock the position of thephysics body along any of the three axes.You can restrict movement of the body along one or more axes by settingthe corresponding item in the tuple to `true`. For example, if you setthe `x` and the `z` items in the tuple to `true`, then the body can moveonly along the y-axis. By default, movement isn’t restricted.","complete":"var isTranslationLocked: (x: Bool, y: Bool, z: Bool)","type":"(x: Bool, y: Bool, z: Bool)","name":"isTranslationLocked"},{"complete":"var isAffectedByGravity: Bool { get set }","type":"Bool","name":"isAffectedByGravity","comment":"A Boolean value that indicates whether gravity acts on dynamic rigid bodies."},{"name":"isRotationLocked","comment":"A tuple of Boolean values that you use to lock rotation of the physicsbody around any of the three axes.For any one of the three Booleans in the tuple that you set to `true`,rotation is restricted on the axis represented by that item. Forexample, if you set the `x` item to true, then the body can’t rotatearound the x-axis. By default, rotation isn’t restricted.","type":"(x: Bool, y: Bool, z: Bool)","complete":"var isRotationLocked: (x: Bool, y: Bool, z: Bool)"},{"complete":"var angularDamping: Float { get set }","type":"Float","name":"angularDamping","comment":"The value that controls how fast a dynamic rigid body's rotational motion approaches the zero rest state.- Important: The damping value must be non-negative."},{"name":"material","comment":"The physics body’s material properties, like friction.By default, the body’s material resource is set to``PhysicsMaterialResource\/default``, which provides a modest amount offriction and restitution (bounciness).","complete":"var material: PhysicsMaterialResource","type":"PhysicsMaterialResource"},{"complete":"var mode: PhysicsBodyMode","comment":"The physics body’s mode, indicating how or if it moves.By default, this value is set to ``PhysicsBodyMode\/dynamic``, meaningthe body responds to forces.","type":"PhysicsBodyMode","name":"mode"},{"type":"Float","complete":"var linearDamping: Float { get set }","name":"linearDamping","comment":"The value that controls how fast a dynamic rigid body's translation motion approaches the zero rest state.- Important: The damping value must be non-negative."}],"name":"PhysicsBodyComponent"},{"name":"PhysicsMotionComponent","properties":[{"complete":"var linearVelocity: SIMD3<Float>","name":"linearVelocity","type":"SIMD3<Float>","comment":"The linear velocity of the body in the physics simulation."},{"comment":"The angular velocity of the body around the center of mass.","name":"angularVelocity","type":"SIMD3<Float>","complete":"var angularVelocity: SIMD3<Float>"}]},{"name":"PhysicsSimulationComponent","properties":[{"type":"PhysicsSimulationComponent.CollisionOptions","complete":"var collisionOptions: PhysicsSimulationComponent.CollisionOptions","name":"collisionOptions","comment":"Options for kinematic collision reporting."},{"complete":"var clock: CMClockOrTimebase { get set }","name":"clock","type":"CMClockOrTimebase","comment":"A custom clock which drives the physics simulation, defaults to the engine clock."},{"complete":"var gravity: SIMD3<Float>","type":"SIMD3<Float>","name":"gravity","comment":"The gravity for the simulation relative to the simulation entity.The value stored in this property is the gravitational acceleration applied to dynamic physics body entities every frame along the negative world Y axis.The default value is `-9.81` meters per second squared."}]},{"properties":[{"comment":"The clipping plane of the portal, defined in the entity's localcoordinates.If defined, the portal will clip meshes inside the world, which are infront of the clipping plane.","type":"PortalComponent.ClippingPlane","complete":"var clippingPlane: PortalComponent.ClippingPlane?","name":"clippingPlane"},{"type":"Entity","complete":"var targetEntity: Entity? { get set }","name":"targetEntity","comment":"The target entity representing the world that the portal is targeting.When the target entity is valid and has a WorldComponent, the portalwill render in its contents the target entity and its entity tree."}],"name":"PortalComponent"},{"properties":[{"name":"entityType","type":"SceneUnderstandingComponent.EntityType","complete":"var entityType: SceneUnderstandingComponent.EntityType?","comment":"The type of real-world object that the component models."},{"comment":"The origin which the component is created from","name":"origin","type":"SceneUnderstandingComponent.Origin","complete":"var origin: SceneUnderstandingComponent.Origin { get }"}],"name":"SceneUnderstandingComponent"},{"name":"SpatialAudioComponent","properties":[{"type":"Audio.Decibel","complete":"var gain: Audio.Decibel","comment":"The overall level for all sounds emitted from an entity. In relative Decibels, in the range  `-.infinity ... .zero` where`.zero` is the default.","name":"gain"},{"type":"Audio.Decibel","comment":"The level of reverberated signal emitted from an entity. In relative Decibels, in the range  `-.infinity ... .zero`, where`.zero` is the default.Reducing this value will cause the sound to be more intimate. Reducing this value to `.-infinity` will cause the sounds tocollapse into the head of the listener.","complete":"var reverbLevel: Audio.Decibel","name":"reverbLevel"},{"name":"directivity","type":"Audio.Directivity","comment":"The radiation pattern for sound emitted from an entity.- Note: The `directivity` property cannot be updated dynamically, so you must set it before preparing or playing an        audio resource on an entity.","complete":"var directivity: Audio.Directivity"},{"comment":"The level of the direct, unreverberated, signal emitted from an entity. In relative Decibels, in the range `-.infinity ... .zero`where `.zero` is the default.","name":"directLevel","complete":"var directLevel: Audio.Decibel","type":"Audio.Decibel"},{"type":"Int","comment":"The hash value.Hash values are not guaranteed to be equal across different executions ofyour program. Do not save hash values to use during a future execution.- Important: `hashValue` is deprecated as a `Hashable` requirement. To  conform to `Hashable`, implement the `hash(into:)` requirement instead.  The compiler provides an implementation for `hashValue` for you.","name":"hashValue","complete":"var hashValue: Int { get }"}]},{"properties":[{"name":"identifier","comment":"A unique identifier of an entity within a network session.","complete":"var identifier: UInt64 { get }","type":"UInt64"},{"comment":"A Boolean that indicates whether the calling process owns the entity.","complete":"var isOwner: Bool { get }","type":"Bool","name":"isOwner"},{"type":"SynchronizationComponent.OwnershipTransferMode","name":"ownershipTransferMode","comment":"The entity’s transfer ownership mode.By default, the transfer mode is``SynchronizationComponent\/OwnershipTransferMode-swift.enum\/autoAccept``.You can set it to``SynchronizationComponent\/OwnershipTransferMode-swift.enum\/manual`` torequire explicit confirmation of the request by your app.","complete":"var ownershipTransferMode: SynchronizationComponent.OwnershipTransferMode"}],"name":"SynchronizationComponent"},{"name":"TextComponent","properties":[{"complete":"var text: AttributedString?","name":"text","type":"AttributedString"},{"name":"size","type":"CGSize","complete":"var size: CGSize"},{"type":"Float","complete":"var cornerRadius: Float","name":"cornerRadius"},{"name":"backgroundColor","type":"CGColor","complete":"var backgroundColor: CGColor?"}]},{"name":"Transform","properties":[{"name":"translation","complete":"var translation: SIMD3<Float>","comment":"The position of the entity along the x, y, and z axes.","type":"SIMD3<Float>"},{"comment":"The scaling factor applied to the entity.","type":"SIMD3<Float>","name":"scale","complete":"var scale: SIMD3<Float>"},{"complete":"var rotation: simd_quatf","name":"rotation","type":"simd_quatf","comment":"The rotation of the entity specified as a unit quaternion."},{"complete":"var hashValue: Int { get }","type":"Int","comment":"The hash value.Hash values are not guaranteed to be equal across different executions ofyour program. Do not save hash values to use during a future execution.- Important: `hashValue` is deprecated as a `Hashable` requirement. To  conform to `Hashable`, implement the `hash(into:)` requirement instead.  The compiler provides an implementation for `hashValue` for you.","name":"hashValue"},{"type":"float4x4","complete":"var matrix: float4x4 { get set }","name":"matrix","comment":"The transform represented as a 4x4 matrix.The ``Transform`` component can’t represent all transforms that ageneral 4x4 matrix can represent. Using a 4x4 matrix to set thetransform is therefore a lossy event that might result in certaintransformations, like shear, being dropped."}]},{"properties":[{"complete":"var currentScreenVideoDimension: SIMD2<Float> { get }","type":"SIMD2<Float>","name":"currentScreenVideoDimension","comment":"the current screen video dimension"},{"type":"Bool","complete":"var isPassthroughTintingEnabled: Bool","name":"isPassthroughTintingEnabled"},{"type":"AVPlayer","complete":"var avPlayer: AVPlayer? { get }","name":"avPlayer","comment":"Returns the avPlayer passed in to init(avPlayer: AVPlayer)"},{"complete":"var viewingMode: VideoPlaybackController.ViewingMode? { get }","name":"viewingMode","type":"VideoPlaybackController.ViewingMode"},{"name":"screenVideoDimension","type":"SIMD2<Float>","complete":"var screenVideoDimension: SIMD2<Float> { get }","comment":"The current screen video dimension"},{"comment":"Represents the current video player screen entity size(Width and Height) in metersif defer transition to app, this will always return 1x1","name":"playerScreenSize","complete":"var playerScreenSize: SIMD2<Float> { get }","type":"SIMD2<Float>"},{"name":"desiredViewingMode","type":"VideoPlaybackController.ViewingMode","complete":"var desiredViewingMode: VideoPlaybackController.ViewingMode"}],"name":"VideoPlayerComponent"},{"name":"WorldComponent","properties":[]}]