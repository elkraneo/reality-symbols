[{"properties":[{"name":"anchorIdentifier","complete":"@MainActor var anchorIdentifier: UUID? { get }","comment":"The identifier of the AR anchor with which the anchor entity isassociated, or `nil` if it isn’t currently anchored.","type":"UUID"},{"type":"AnchoringComponent","complete":"@MainActor var anchoring: AnchoringComponent { get set }","name":"anchoring"}],"name":"AnchorEntity"},{"name":"Entity","properties":[{"complete":"@MainActor var spatialAudio: SpatialAudioComponent? { get set }","name":"spatialAudio","type":"SpatialAudioComponent","comment":"Configure the spatial rendering of sounds emitted from this entity."},{"comment":"The parent entity.An entity has at most one parent entity. If an entity isn’t part of ahierarchy, or if it is a root entity, the ``HasHierarchy\/parent``property is `nil`.Use the ``HasHierarchy\/setParent(_:preservingWorldTransform:)`` methodto change an entity’s parent. Use the``HasHierarchy\/removeFromParent(preservingWorldTransform:)`` method toremove the parent. These methods automatically update the corresponding``HasHierarchy\/children`` collections of the new and old parent.","complete":"@MainActor var parent: Entity? { get }","name":"parent","type":"Entity"},{"complete":"@MainActor var components: Entity.ComponentSet { get set }","comment":"All the components stored on the entity.You can only store one component of a given type on an entity.","name":"components","type":"Entity.ComponentSet"},{"type":"String","name":"accessibilityDescription","complete":"@MainActor var accessibilityDescription: String? { get set }","comment":"A longer description of the entity for use by assistive technologies."},{"complete":"@MainActor var isAccessibilityElement: Bool { get set }","type":"Bool","name":"isAccessibilityElement","comment":"A Boolean value indicating whether the receiver is an accessibilityelement that an assistive application can access."},{"type":"String","name":"name","comment":"The name of the entity.You can find an entity by name in a scene by calling the scene’s``Scene\/findEntity(named:)`` method. Or you can recursively search amongthe children of a given entity by calling the entity’s``Entity\/findEntity(named:)`` method.Entity names are not guaranteed to be unique. When you search by name,these methods return the first entity encountered with the given name.","complete":"@MainActor var name: String { get set }"},{"complete":"@MainActor var channelAudio: ChannelAudioComponent? { get set }","name":"channelAudio","comment":"Configure the channel-based rendering of sounds from this entity.","type":"ChannelAudioComponent"},{"complete":"@MainActor var id: UInt64 { get }","name":"id","comment":"The stable identity of the entity associated with this instance.","type":"UInt64"},{"name":"scene","complete":"@MainActor var scene: Scene? { get }","type":"Scene","comment":"The scene that owns the entity.An entity belongs to a scene if the entity is part of a hierarchy that’srooted in the scene’s ``Scene\/anchors`` collection.The value of the property is `nil` if the entity isn’t currentlyattached to any scene."},{"type":"Bool","complete":"@MainActor var isEnabled: Bool { get set }","comment":"A Boolean that you set to enable or disable the entity and itsdescendants.Set this value to `true` to enable the entity. Unless an ancestor isdisabled, the entity and all of its enabled descendants, up to the firstthat’s disabled, report ``Entity\/isEnabledInHierarchy`` of `true`. If anancestor is disabled, they all report `false`. The state of``Entity\/isActive`` for enabled entities is `true` if they are anchored,or `false` otherwise.If you disable an entity, it and all of its descendants become bothdisabled (``Entity\/isEnabledInHierarchy`` returns `false`) and inactive(``Entity\/isActive`` returns `false`), regardless of any other state.When an entity is disabled, it's no longer visible in your scene. However, the entity is still included in an ``RealityKit\/EntityQuery``.","name":"isEnabled"},{"comment":"The scale of the entity relative to its parent.This value is the entity’s scale relative to its parent. To get theactual scale of the entity in the scene, use``HasTransform\/scale(relativeTo:)``, passing `nil` as the referenceentity.This is the same as the ``Transform\/scale`` value on the``HasTransform\/transform``.","complete":"@MainActor var scale: SIMD3<Float> { get set }","type":"SIMD3<Float>","name":"scale"},{"complete":"@MainActor var isEnabledInHierarchy: Bool { get }","comment":"A Boolean that indicates whether the entity and all of its ancestors areenabled.The value of this property is `true` if the entity and all of itsancestors are enabled, regardless of anchor state.","type":"Bool","name":"isEnabledInHierarchy"},{"complete":"@MainActor var characterController: CharacterControllerComponent? { get set }","name":"characterController","type":"CharacterControllerComponent","comment":"The character controller component for the entity."},{"complete":"@MainActor var accessibilityLabel: String? { get set }","name":"accessibilityLabel","type":"String","comment":"A succinct label that identifies the purpose of the image.The default value for this property is `false`.For entities with ``Entity\/isAccessibilityElement`` set to<doc:\/\/com.apple.documentation\/documentation\/swift\/true>, iOS uses thisstring to provide information to users of assistive technologies likeVoiceOver. Set this property to a name or short description thataccurately describes the entity. If you wish to provide additionalinformation or a longer description of the entity, you can use``Entity\/accessibilityDescription``."},{"type":"Bool","complete":"@MainActor var isActive: Bool { get }","name":"isActive","comment":"A Boolean that indicates whether the entity is active.The value of this property is `true` if the entity is anchored in ascene, and it and all of its ancestors are enabled (``Entity\/isEnabled``is set to `true`). RealityKit doesn’t simulate or render inactiveentities."},{"comment":"Returns the default animation clock for this entity.","name":"defaultAnimationClock","complete":"@MainActor var defaultAnimationClock: CMClockOrTimebase { get set }","type":"CMClockOrTimebase"},{"type":"Bool","name":"isAnchored","comment":"A Boolean that indicates whether the entity is anchored.The value of this property is `true` if the entity is anchored in ascene. An entity that isn’t anchored becomes inactive(``Entity\/isActive`` returns `false`), meaning RealityKit doesn’t renderor simulate it.","complete":"@MainActor var isAnchored: Bool { get }"},{"complete":"@MainActor var position: SIMD3<Float> { get set }","comment":"The position of the entity relative to its parent.This value is the entity’s position relative to its parent. To get theworld-space position of the entity in the scene, use``HasTransform\/position(relativeTo:)``, passing `nil` as the referenceentity.This is the same as the ``Transform\/translation`` value on the``HasTransform\/transform``.","type":"SIMD3<Float>","name":"position"},{"complete":"@MainActor var children: Entity.ChildCollection { get set }","comment":"The child entities that the entity manages.An entity can have any number of child entities.Use the ``HasHierarchy\/addChild(_:preservingWorldTransform:)`` method toadd a child to an entity. Use the``HasHierarchy\/removeChild(_:preservingWorldTransform:)`` method toremove one from an entity. These methods automatically update the``HasHierarchy\/parent`` properties of the child entities.","type":"Entity.ChildCollection","name":"children"},{"name":"ambientAudio","comment":"Configure the ambient rendering of sounds from this entity.","type":"AmbientAudioComponent","complete":"@MainActor var ambientAudio: AmbientAudioComponent? { get set }"},{"complete":"@MainActor var transform: Transform { get set }","name":"transform","type":"Transform","comment":"The transform of an entity relative to its parent.For an ``AnchorEntity`` instance, the transform is relative to the ARanchor."},{"name":"orientation","comment":"The rotation of the entity relative to its parent.This value is the entity’s rotation relative to its parent. To get theworld-space orientation of the entity, use``HasTransform\/orientation(relativeTo:)``, passing `nil` as thereference entity.This is the same as the ``Transform\/rotation`` value on the``HasTransform\/transform``.","type":"simd_quatf","complete":"@MainActor var orientation: simd_quatf { get set }"},{"complete":"@MainActor var isOwner: Bool { get }","type":"Bool","comment":"A Boolean that indicates whether the calling process owns the entity.The calling process owns the entity if the value is `true`.","name":"isOwner"},{"comment":"The character controller state for  the entity.","complete":"@MainActor var characterControllerState: CharacterControllerStateComponent? { get set }","type":"CharacterControllerStateComponent","name":"characterControllerState"},{"name":"anchor","complete":"@MainActor var anchor: (HasAnchoring)? { get }","type":"(HasAnchoring)","comment":"The nearest ancestor entity that can act as an anchor.This property returns `nil` if no ancestor can act as an anchor. Anentity can act as an anchor if it adopts the ``HasAnchoring`` protocol.Just because an ancestor can be anchored doesn’t mean that it is.Inspect the ``Entity\/isAnchored`` property to see if an entity (or oneof its ancestors) is anchored."},{"complete":"@MainActor var bindableValues: BindableValuesReference { get set }","name":"bindableValues","type":"BindableValuesReference"},{"comment":"The hash value.Hash values are not guaranteed to be equal across different executions ofyour program. Do not save hash values to use during a future execution.- Important: `hashValue` is deprecated as a `Hashable` requirement. To  conform to `Hashable`, implement the `hash(into:)` requirement instead.  The compiler provides an implementation for `hashValue` for you.","name":"hashValue","complete":"nonisolated var hashValue: Int { get }","type":"Int"},{"comment":"A human readable description of the entity.","name":"debugDescription","complete":"@MainActor var debugDescription: String { get }","type":"String"},{"name":"parameters","comment":"Represents a reference to the parameters for a particular entity.","type":"Entity.ParameterSet","complete":"@MainActor var parameters: Entity.ParameterSet { get set }"},{"comment":"The list of animations associated with the entity.When you import an entity from a file, for example by using the``Entity\/load(named:in:)`` method, the entity might contain associatedanimations. Any that RealityKit supports appear in the``Entity\/availableAnimations`` array.To play a particular animation resource from the list, call the``Entity\/playAnimation(_:transitionDuration:startsPaused:)`` method.Alternatively, to play all animations with a given name, call the`playAnimation(named:transitionDuration:startsPaused:)` method instead.","type":"[AnimationResource]","complete":"@MainActor var availableAnimations: [AnimationResource] { get }","name":"availableAnimations"},{"comment":"The entity’s synchronization component.","complete":"@MainActor var synchronization: SynchronizationComponent? { get set }","type":"SynchronizationComponent","name":"synchronization"}]},{"properties":[{"complete":"@MainActor var physicsMotion: PhysicsMotionComponent? { get set }","name":"physicsMotion","comment":"The physics motion component used by physics simulations of the modelentity.","type":"PhysicsMotionComponent"},{"complete":"@MainActor var debugModel: ModelDebugOptionsComponent? { get set }","name":"debugModel","type":"ModelDebugOptionsComponent"},{"type":"ModelComponent","complete":"@MainActor var model: ModelComponent? { get set }","name":"model","comment":"The model component for the entity."},{"type":"ModelDebugOptionsComponent","name":"modelDebugOptions","complete":"@MainActor var modelDebugOptions: ModelDebugOptionsComponent? { get set }","comment":"Configures the debug visualization of this model."},{"type":"PhysicsBodyComponent","comment":"A component that is used for physics simulations of the model entity inaccordance with the laws of Newtonian mechanics.","name":"physicsBody","complete":"@MainActor var physicsBody: PhysicsBodyComponent? { get set }"},{"type":"[Transform]","name":"jointTransforms","complete":"@MainActor var jointTransforms: [Transform] { get set }","comment":"The relative joint transforms of the model entity.Call ``RealityKit\/BodyTrackedEntity\/jointNames`` to determine the name and order of the joints.- Note: Active animations may override the joint transforms set using this property.."},{"type":"[String]","name":"jointNames","complete":"@MainActor var jointNames: [String] { get }","comment":"The names of all the joints in the model entity."},{"type":"CollisionComponent","name":"collision","complete":"@MainActor var collision: CollisionComponent? { get set }","comment":"The collision component that gives the entity the ability to participatein collision simulations."}],"name":"ModelEntity"},{"properties":[{"complete":"@MainActor var camera: PerspectiveCameraComponent { get set }","name":"camera","type":"PerspectiveCameraComponent","comment":"A camera component for the perspective camera entity."}],"name":"PerspectiveCamera"},{"properties":[{"name":"collision","type":"CollisionComponent","complete":"@MainActor var collision: CollisionComponent? { get set }","comment":"The collision component that gives the entity the ability to participatein collision simulations."}],"name":"TriggerVolume"}]